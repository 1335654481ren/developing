// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "carmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbcar {

namespace {

const ::google::protobuf::Descriptor* ImageUpload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageUpload_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocUpload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocUpload_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageWrapper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_carmsg_2eproto() {
  protobuf_AddDesc_carmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "carmsg.proto");
  GOOGLE_CHECK(file != NULL);
  ImageUpload_descriptor_ = file->message_type(0);
  static const int ImageUpload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, sequence_),
  };
  ImageUpload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageUpload_descriptor_,
      ImageUpload::default_instance_,
      ImageUpload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageUpload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageUpload));
  LocInfo_descriptor_ = file->message_type(1);
  static const int LocInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, w_),
  };
  LocInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocInfo_descriptor_,
      LocInfo::default_instance_,
      LocInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocInfo));
  LocUpload_descriptor_ = file->message_type(2);
  static const int LocUpload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocUpload, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocUpload, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocUpload, sequence_),
  };
  LocUpload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocUpload_descriptor_,
      LocUpload::default_instance_,
      LocUpload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocUpload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocUpload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocUpload));
  ServerResponse_descriptor_ = file->message_type(3);
  static const int ServerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, sequence_),
  };
  ServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerResponse_descriptor_,
      ServerResponse::default_instance_,
      ServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerResponse));
  ServerCmd_descriptor_ = file->message_type(4);
  static const int ServerCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, start_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, end_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, sequence_),
  };
  ServerCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCmd_descriptor_,
      ServerCmd::default_instance_,
      ServerCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCmd));
  DeviceResponse_descriptor_ = file->message_type(5);
  static const int DeviceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponse, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponse, sequence_),
  };
  DeviceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceResponse_descriptor_,
      DeviceResponse::default_instance_,
      DeviceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceResponse));
  MessageWrapper_descriptor_ = file->message_type(6);
  static const int MessageWrapper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, image_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, loc_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, server_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, server_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, device_resp_),
  };
  MessageWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageWrapper_descriptor_,
      MessageWrapper::default_instance_,
      MessageWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageWrapper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_carmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageUpload_descriptor_, &ImageUpload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocInfo_descriptor_, &LocInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocUpload_descriptor_, &LocUpload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerResponse_descriptor_, &ServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCmd_descriptor_, &ServerCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceResponse_descriptor_, &DeviceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageWrapper_descriptor_, &MessageWrapper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_carmsg_2eproto() {
  delete ImageUpload::default_instance_;
  delete ImageUpload_reflection_;
  delete LocInfo::default_instance_;
  delete LocInfo_reflection_;
  delete LocUpload::default_instance_;
  delete LocUpload_reflection_;
  delete ServerResponse::default_instance_;
  delete ServerResponse_reflection_;
  delete ServerCmd::default_instance_;
  delete ServerCmd_reflection_;
  delete DeviceResponse::default_instance_;
  delete DeviceResponse_reflection_;
  delete MessageWrapper::default_instance_;
  delete MessageWrapper_reflection_;
}

void protobuf_AddDesc_carmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014carmsg.proto\022\005pbcar\"U\n\013ImageUpload\022\020\n\010"
    "snapshot\030\001 \003(\014\022\021\n\ttimestamp\030\002 \001(\004\022\017\n\007ses"
    "sion\030\003 \001(\t\022\020\n\010sequence\030\004 \001(\t\"5\n\007LocInfo\022"
    "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 "
    "\001(\002\"R\n\tLocUpload\022 \n\010location\030\001 \003(\0132\016.pbc"
    "ar.LocInfo\022\021\n\ttimestamp\030\002 \001(\004\022\020\n\010sequenc"
    "e\030\003 \001(\t\"E\n\016ServerResponse\022\023\n\013status_code"
    "\030\001 \001(\005\022\014\n\004desc\030\002 \001(\t\022\020\n\010sequence\030\003 \001(\t\"\224"
    "\001\n\tServerCmd\022\013\n\003cmd\030\001 \001(\005\022\021\n\ttimestamp\030\002"
    " \001(\004\022#\n\013start_point\030\003 \001(\0132\016.pbcar.LocInf"
    "o\022!\n\tend_point\030\004 \001(\0132\016.pbcar.LocInfo\022\r\n\005"
    "route\030\005 \003(\005\022\020\n\010sequence\030\006 \001(\t\"E\n\016DeviceR"
    "esponse\022\023\n\013status_code\030\001 \001(\005\022\014\n\004desc\030\002 \001"
    "(\t\022\020\n\010sequence\030\003 \001(\t\"\336\001\n\016MessageWrapper\022"
    "(\n\014image_upload\030\001 \001(\0132\022.pbcar.ImageUploa"
    "d\022$\n\nloc_upload\030\002 \001(\0132\020.pbcar.LocUpload\022"
    "*\n\013server_resp\030\003 \001(\0132\025.pbcar.ServerRespo"
    "nse\022$\n\nserver_cmd\030\004 \001(\0132\020.pbcar.ServerCm"
    "d\022*\n\013device_resp\030\005 \001(\0132\025.pbcar.DeviceRes"
    "ponse", 765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "carmsg.proto", &protobuf_RegisterTypes);
  ImageUpload::default_instance_ = new ImageUpload();
  LocInfo::default_instance_ = new LocInfo();
  LocUpload::default_instance_ = new LocUpload();
  ServerResponse::default_instance_ = new ServerResponse();
  ServerCmd::default_instance_ = new ServerCmd();
  DeviceResponse::default_instance_ = new DeviceResponse();
  MessageWrapper::default_instance_ = new MessageWrapper();
  ImageUpload::default_instance_->InitAsDefaultInstance();
  LocInfo::default_instance_->InitAsDefaultInstance();
  LocUpload::default_instance_->InitAsDefaultInstance();
  ServerResponse::default_instance_->InitAsDefaultInstance();
  ServerCmd::default_instance_->InitAsDefaultInstance();
  DeviceResponse::default_instance_->InitAsDefaultInstance();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_carmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_carmsg_2eproto {
  StaticDescriptorInitializer_carmsg_2eproto() {
    protobuf_AddDesc_carmsg_2eproto();
  }
} static_descriptor_initializer_carmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ImageUpload::kSnapshotFieldNumber;
const int ImageUpload::kTimestampFieldNumber;
const int ImageUpload::kSessionFieldNumber;
const int ImageUpload::kSequenceFieldNumber;
#endif  // !_MSC_VER

ImageUpload::ImageUpload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.ImageUpload)
}

void ImageUpload::InitAsDefaultInstance() {
}

ImageUpload::ImageUpload(const ImageUpload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.ImageUpload)
}

void ImageUpload::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageUpload::~ImageUpload() {
  // @@protoc_insertion_point(destructor:pbcar.ImageUpload)
  SharedDtor();
}

void ImageUpload::SharedDtor() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void ImageUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageUpload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageUpload_descriptor_;
}

const ImageUpload& ImageUpload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

ImageUpload* ImageUpload::default_instance_ = NULL;

ImageUpload* ImageUpload::New() const {
  return new ImageUpload;
}

void ImageUpload::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_->clear();
      }
    }
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_->clear();
      }
    }
  }
  snapshot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.ImageUpload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes snapshot = 1;
      case 1: {
        if (tag == 10) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_snapshot;
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }

      // optional string session = 3;
      case 3: {
        if (tag == 26) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sequence;
        break;
      }

      // optional string sequence = 4;
      case 4: {
        if (tag == 34) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.ImageUpload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.ImageUpload)
  return false;
#undef DO_
}

void ImageUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.ImageUpload)
  // repeated bytes snapshot = 1;
  for (int i = 0; i < this->snapshot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->snapshot(i), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session(), output);
  }

  // optional string sequence = 4;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.ImageUpload)
}

::google::protobuf::uint8* ImageUpload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.ImageUpload)
  // repeated bytes snapshot = 1;
  for (int i = 0; i < this->snapshot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->snapshot(i), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session(), target);
  }

  // optional string sequence = 4;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.ImageUpload)
  return target;
}

int ImageUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional string session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional string sequence = 4;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  // repeated bytes snapshot = 1;
  total_size += 1 * this->snapshot_size();
  for (int i = 0; i < this->snapshot_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->snapshot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageUpload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageUpload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageUpload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageUpload::MergeFrom(const ImageUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  snapshot_.MergeFrom(from.snapshot_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageUpload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageUpload::CopyFrom(const ImageUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageUpload::IsInitialized() const {

  return true;
}

void ImageUpload::Swap(ImageUpload* other) {
  if (other != this) {
    snapshot_.Swap(&other->snapshot_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(session_, other->session_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageUpload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageUpload_descriptor_;
  metadata.reflection = ImageUpload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocInfo::kXFieldNumber;
const int LocInfo::kYFieldNumber;
const int LocInfo::kZFieldNumber;
const int LocInfo::kWFieldNumber;
#endif  // !_MSC_VER

LocInfo::LocInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.LocInfo)
}

void LocInfo::InitAsDefaultInstance() {
}

LocInfo::LocInfo(const LocInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.LocInfo)
}

void LocInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocInfo::~LocInfo() {
  // @@protoc_insertion_point(destructor:pbcar.LocInfo)
  SharedDtor();
}

void LocInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocInfo_descriptor_;
}

const LocInfo& LocInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

LocInfo* LocInfo::default_instance_ = NULL;

LocInfo* LocInfo::New() const {
  return new LocInfo;
}

void LocInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, w_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.LocInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.LocInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.LocInfo)
  return false;
#undef DO_
}

void LocInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.LocInfo)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.LocInfo)
}

::google::protobuf::uint8* LocInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.LocInfo)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.LocInfo)
  return target;
}

int LocInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocInfo::MergeFrom(const LocInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocInfo::CopyFrom(const LocInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocInfo::IsInitialized() const {

  return true;
}

void LocInfo::Swap(LocInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocInfo_descriptor_;
  metadata.reflection = LocInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocUpload::kLocationFieldNumber;
const int LocUpload::kTimestampFieldNumber;
const int LocUpload::kSequenceFieldNumber;
#endif  // !_MSC_VER

LocUpload::LocUpload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.LocUpload)
}

void LocUpload::InitAsDefaultInstance() {
}

LocUpload::LocUpload(const LocUpload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.LocUpload)
}

void LocUpload::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocUpload::~LocUpload() {
  // @@protoc_insertion_point(destructor:pbcar.LocUpload)
  SharedDtor();
}

void LocUpload::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void LocUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocUpload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocUpload_descriptor_;
}

const LocUpload& LocUpload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

LocUpload* LocUpload::default_instance_ = NULL;

LocUpload* LocUpload::New() const {
  return new LocUpload;
}

void LocUpload::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_->clear();
      }
    }
  }
  location_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.LocUpload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbcar.LocInfo location = 1;
      case 1: {
        if (tag == 10) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_location;
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }

      // optional string sequence = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.LocUpload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.LocUpload)
  return false;
#undef DO_
}

void LocUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.LocUpload)
  // repeated .pbcar.LocInfo location = 1;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(i), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.LocUpload)
}

::google::protobuf::uint8* LocUpload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.LocUpload)
  // repeated .pbcar.LocInfo location = 1;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(i), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.LocUpload)
  return target;
}

int LocUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional string sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  // repeated .pbcar.LocInfo location = 1;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocUpload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocUpload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocUpload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocUpload::MergeFrom(const LocUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_.MergeFrom(from.location_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocUpload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocUpload::CopyFrom(const LocUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocUpload::IsInitialized() const {

  return true;
}

void LocUpload::Swap(LocUpload* other) {
  if (other != this) {
    location_.Swap(&other->location_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocUpload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocUpload_descriptor_;
  metadata.reflection = LocUpload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerResponse::kStatusCodeFieldNumber;
const int ServerResponse::kDescFieldNumber;
const int ServerResponse::kSequenceFieldNumber;
#endif  // !_MSC_VER

ServerResponse::ServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.ServerResponse)
}

void ServerResponse::InitAsDefaultInstance() {
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.ServerResponse)
}

void ServerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_code_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:pbcar.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerResponse_descriptor_;
}

const ServerResponse& ServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

ServerResponse* ServerResponse::default_instance_ = NULL;

ServerResponse* ServerResponse::New() const {
  return new ServerResponse;
}

void ServerResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_code_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.ServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }

      // optional string sequence = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.ServerResponse)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.ServerResponse)
}

::google::protobuf::uint8* ServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.ServerResponse)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status_code(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.ServerResponse)
  return target;
}

int ServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {

  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(desc_, other->desc_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerResponse_descriptor_;
  metadata.reflection = ServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCmd::kCmdFieldNumber;
const int ServerCmd::kTimestampFieldNumber;
const int ServerCmd::kStartPointFieldNumber;
const int ServerCmd::kEndPointFieldNumber;
const int ServerCmd::kRouteFieldNumber;
const int ServerCmd::kSequenceFieldNumber;
#endif  // !_MSC_VER

ServerCmd::ServerCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.ServerCmd)
}

void ServerCmd::InitAsDefaultInstance() {
  start_point_ = const_cast< ::pbcar::LocInfo*>(&::pbcar::LocInfo::default_instance());
  end_point_ = const_cast< ::pbcar::LocInfo*>(&::pbcar::LocInfo::default_instance());
}

ServerCmd::ServerCmd(const ServerCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.ServerCmd)
}

void ServerCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  start_point_ = NULL;
  end_point_ = NULL;
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCmd::~ServerCmd() {
  // @@protoc_insertion_point(destructor:pbcar.ServerCmd)
  SharedDtor();
}

void ServerCmd::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_;
  }
  if (this != default_instance_) {
    delete start_point_;
    delete end_point_;
  }
}

void ServerCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCmd_descriptor_;
}

const ServerCmd& ServerCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

ServerCmd* ServerCmd::default_instance_ = NULL;

ServerCmd* ServerCmd::New() const {
  return new ServerCmd;
}

void ServerCmd::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    cmd_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_start_point()) {
      if (start_point_ != NULL) start_point_->::pbcar::LocInfo::Clear();
    }
    if (has_end_point()) {
      if (end_point_ != NULL) end_point_->::pbcar::LocInfo::Clear();
    }
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_->clear();
      }
    }
  }
  route_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.ServerCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_point;
        break;
      }

      // optional .pbcar.LocInfo start_point = 3;
      case 3: {
        if (tag == 26) {
         parse_start_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_point;
        break;
      }

      // optional .pbcar.LocInfo end_point = 4;
      case 4: {
        if (tag == 34) {
         parse_end_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_route;
        break;
      }

      // repeated int32 route = 5;
      case 5: {
        if (tag == 40) {
         parse_route:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_route())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_route())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_route;
        if (input->ExpectTag(50)) goto parse_sequence;
        break;
      }

      // optional string sequence = 6;
      case 6: {
        if (tag == 50) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.ServerCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.ServerCmd)
  return false;
#undef DO_
}

void ServerCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.ServerCmd)
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .pbcar.LocInfo start_point = 3;
  if (has_start_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_point(), output);
  }

  // optional .pbcar.LocInfo end_point = 4;
  if (has_end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_point(), output);
  }

  // repeated int32 route = 5;
  for (int i = 0; i < this->route_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->route(i), output);
  }

  // optional string sequence = 6;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.ServerCmd)
}

::google::protobuf::uint8* ServerCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.ServerCmd)
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .pbcar.LocInfo start_point = 3;
  if (has_start_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_point(), target);
  }

  // optional .pbcar.LocInfo end_point = 4;
  if (has_end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_point(), target);
  }

  // repeated int32 route = 5;
  for (int i = 0; i < this->route_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->route(i), target);
  }

  // optional string sequence = 6;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.ServerCmd)
  return target;
}

int ServerCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .pbcar.LocInfo start_point = 3;
    if (has_start_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_point());
    }

    // optional .pbcar.LocInfo end_point = 4;
    if (has_end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_point());
    }

    // optional string sequence = 6;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  // repeated int32 route = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->route_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->route(i));
    }
    total_size += 1 * this->route_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCmd::MergeFrom(const ServerCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  route_.MergeFrom(from.route_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_start_point()) {
      mutable_start_point()->::pbcar::LocInfo::MergeFrom(from.start_point());
    }
    if (from.has_end_point()) {
      mutable_end_point()->::pbcar::LocInfo::MergeFrom(from.end_point());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCmd::CopyFrom(const ServerCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCmd::IsInitialized() const {

  return true;
}

void ServerCmd::Swap(ServerCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(start_point_, other->start_point_);
    std::swap(end_point_, other->end_point_);
    route_.Swap(&other->route_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCmd_descriptor_;
  metadata.reflection = ServerCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceResponse::kStatusCodeFieldNumber;
const int DeviceResponse::kDescFieldNumber;
const int DeviceResponse::kSequenceFieldNumber;
#endif  // !_MSC_VER

DeviceResponse::DeviceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.DeviceResponse)
}

void DeviceResponse::InitAsDefaultInstance() {
}

DeviceResponse::DeviceResponse(const DeviceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.DeviceResponse)
}

void DeviceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_code_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceResponse::~DeviceResponse() {
  // @@protoc_insertion_point(destructor:pbcar.DeviceResponse)
  SharedDtor();
}

void DeviceResponse::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void DeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceResponse_descriptor_;
}

const DeviceResponse& DeviceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

DeviceResponse* DeviceResponse::default_instance_ = NULL;

DeviceResponse* DeviceResponse::New() const {
  return new DeviceResponse;
}

void DeviceResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_code_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.DeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }

      // optional string sequence = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.DeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.DeviceResponse)
  return false;
#undef DO_
}

void DeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.DeviceResponse)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.DeviceResponse)
}

::google::protobuf::uint8* DeviceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.DeviceResponse)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status_code(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.DeviceResponse)
  return target;
}

int DeviceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceResponse::MergeFrom(const DeviceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceResponse::CopyFrom(const DeviceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceResponse::IsInitialized() const {

  return true;
}

void DeviceResponse::Swap(DeviceResponse* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(desc_, other->desc_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceResponse_descriptor_;
  metadata.reflection = DeviceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageWrapper::kImageUploadFieldNumber;
const int MessageWrapper::kLocUploadFieldNumber;
const int MessageWrapper::kServerRespFieldNumber;
const int MessageWrapper::kServerCmdFieldNumber;
const int MessageWrapper::kDeviceRespFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbcar.MessageWrapper)
}

void MessageWrapper::InitAsDefaultInstance() {
  image_upload_ = const_cast< ::pbcar::ImageUpload*>(&::pbcar::ImageUpload::default_instance());
  loc_upload_ = const_cast< ::pbcar::LocUpload*>(&::pbcar::LocUpload::default_instance());
  server_resp_ = const_cast< ::pbcar::ServerResponse*>(&::pbcar::ServerResponse::default_instance());
  server_cmd_ = const_cast< ::pbcar::ServerCmd*>(&::pbcar::ServerCmd::default_instance());
  device_resp_ = const_cast< ::pbcar::DeviceResponse*>(&::pbcar::DeviceResponse::default_instance());
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbcar.MessageWrapper)
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  image_upload_ = NULL;
  loc_upload_ = NULL;
  server_resp_ = NULL;
  server_cmd_ = NULL;
  device_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  // @@protoc_insertion_point(destructor:pbcar.MessageWrapper)
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  if (this != default_instance_) {
    delete image_upload_;
    delete loc_upload_;
    delete server_resp_;
    delete server_cmd_;
    delete device_resp_;
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_descriptor_;
}

const MessageWrapper& MessageWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carmsg_2eproto();
  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_image_upload()) {
      if (image_upload_ != NULL) image_upload_->::pbcar::ImageUpload::Clear();
    }
    if (has_loc_upload()) {
      if (loc_upload_ != NULL) loc_upload_->::pbcar::LocUpload::Clear();
    }
    if (has_server_resp()) {
      if (server_resp_ != NULL) server_resp_->::pbcar::ServerResponse::Clear();
    }
    if (has_server_cmd()) {
      if (server_cmd_ != NULL) server_cmd_->::pbcar::ServerCmd::Clear();
    }
    if (has_device_resp()) {
      if (device_resp_ != NULL) device_resp_->::pbcar::DeviceResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbcar.MessageWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbcar.ImageUpload image_upload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_upload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loc_upload;
        break;
      }

      // optional .pbcar.LocUpload loc_upload = 2;
      case 2: {
        if (tag == 18) {
         parse_loc_upload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc_upload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_resp;
        break;
      }

      // optional .pbcar.ServerResponse server_resp = 3;
      case 3: {
        if (tag == 26) {
         parse_server_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_cmd;
        break;
      }

      // optional .pbcar.ServerCmd server_cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_server_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_resp;
        break;
      }

      // optional .pbcar.DeviceResponse device_resp = 5;
      case 5: {
        if (tag == 42) {
         parse_device_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbcar.MessageWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbcar.MessageWrapper)
  return false;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbcar.MessageWrapper)
  // optional .pbcar.ImageUpload image_upload = 1;
  if (has_image_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image_upload(), output);
  }

  // optional .pbcar.LocUpload loc_upload = 2;
  if (has_loc_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loc_upload(), output);
  }

  // optional .pbcar.ServerResponse server_resp = 3;
  if (has_server_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_resp(), output);
  }

  // optional .pbcar.ServerCmd server_cmd = 4;
  if (has_server_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_cmd(), output);
  }

  // optional .pbcar.DeviceResponse device_resp = 5;
  if (has_device_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device_resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbcar.MessageWrapper)
}

::google::protobuf::uint8* MessageWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcar.MessageWrapper)
  // optional .pbcar.ImageUpload image_upload = 1;
  if (has_image_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image_upload(), target);
  }

  // optional .pbcar.LocUpload loc_upload = 2;
  if (has_loc_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loc_upload(), target);
  }

  // optional .pbcar.ServerResponse server_resp = 3;
  if (has_server_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_resp(), target);
  }

  // optional .pbcar.ServerCmd server_cmd = 4;
  if (has_server_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_cmd(), target);
  }

  // optional .pbcar.DeviceResponse device_resp = 5;
  if (has_device_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device_resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcar.MessageWrapper)
  return target;
}

int MessageWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pbcar.ImageUpload image_upload = 1;
    if (has_image_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_upload());
    }

    // optional .pbcar.LocUpload loc_upload = 2;
    if (has_loc_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc_upload());
    }

    // optional .pbcar.ServerResponse server_resp = 3;
    if (has_server_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_resp());
    }

    // optional .pbcar.ServerCmd server_cmd = 4;
    if (has_server_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_cmd());
    }

    // optional .pbcar.DeviceResponse device_resp = 5;
    if (has_device_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_resp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_upload()) {
      mutable_image_upload()->::pbcar::ImageUpload::MergeFrom(from.image_upload());
    }
    if (from.has_loc_upload()) {
      mutable_loc_upload()->::pbcar::LocUpload::MergeFrom(from.loc_upload());
    }
    if (from.has_server_resp()) {
      mutable_server_resp()->::pbcar::ServerResponse::MergeFrom(from.server_resp());
    }
    if (from.has_server_cmd()) {
      mutable_server_cmd()->::pbcar::ServerCmd::MergeFrom(from.server_cmd());
    }
    if (from.has_device_resp()) {
      mutable_device_resp()->::pbcar::DeviceResponse::MergeFrom(from.device_resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {

  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(image_upload_, other->image_upload_);
    std::swap(loc_upload_, other->loc_upload_);
    std::swap(server_resp_, other->server_resp_);
    std::swap(server_cmd_, other->server_cmd_);
    std::swap(device_resp_, other->device_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageWrapper_descriptor_;
  metadata.reflection = MessageWrapper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbcar

// @@protoc_insertion_point(global_scope)
